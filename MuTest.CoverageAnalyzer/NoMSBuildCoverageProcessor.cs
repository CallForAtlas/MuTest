using System.Collections.Generic;
using System.IO;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using MuTest.Core.Testing;
using MuTest.Core.Utility;

namespace MuTest.CoverageAnalyzer
{
    internal class NoMSBuildCoverageProcessor : IClassExtractor
    {
        private Chalk _chalk = new Chalk();
        private ClassIsAutoGeneratedResolver _classIsAutoGeneratedResolver = new ClassIsAutoGeneratedResolver();
        private static readonly ClassCoverageAnalyzerFactory ClassCoverageAnalyzerFactory = new ClassCoverageAnalyzerFactory();

        public IEnumerable<Model.Class> ExtractClasses(Model.Project sourceProject)
        {
            var sourceProjectFile = new FileInfo(sourceProject.AbsolutePath);
            var sourceFiles = sourceProjectFile.GetProjectFiles();
            var sourceClasses = new List<Model.Class>();
            foreach (string sourceClass in sourceFiles.Keys)
            {
                var classPath = sourceFiles.Get(sourceClass);
                if (!File.Exists(classPath))
                {
                    continue;
                }

                foreach (var classDeclarationSyntax in classPath.GetCodeFileContent().RootNode().DescendantNodes<ClassDeclarationSyntax>())
                {
                    var claz = new Model.Class
                    {
                        DeclarationSyntax = classDeclarationSyntax,
                        FilePath = classPath,
                        FullClassName = classDeclarationSyntax.FullNameIncludingTypeParameters()
                    };
                    sourceClasses.Add(claz);
                }
            }
            return sourceClasses;
        }
    }
}
